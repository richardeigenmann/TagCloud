{"name":"Tagcloud","tagline":"Java Swing Component that shows words in different colors and font sizes based on weights","body":"TagCloud\r\n========\r\n\r\nJava Swing Component that shows words in different colors and font sizes based on weights.\r\n\r\n[Project Page](http://richardeigenmann.github.io/TagCloud)\r\n\r\nQuickstart\r\n----------\r\n\r\n[Download the jar file](http://richardeigenmann.github.io/TagCloud/TagCloud.jar) and run the sample program:\r\n\r\n```Bash\r\njava  -jar ./TagCloud.jar\r\n```\r\n\r\n![Screenshot of TagCloud demo code](http://richardeigenmann.github.io/TagCloud/images/Screenshot1.png)\r\n\r\n\r\nUsage\r\n-----\r\n\r\n[Javadoc](http://richardeigenmann.github.io/TagCloud/javadoc)\r\n\r\nTo create the component, create a List of WeightedWord objects, create a TagCloud and associate the List<WeighetdWord> with the TagCloud and add the TagCloud to your Swing tree:\r\n\r\n```Java\r\nList<WeightedWordInterface> weightedWordList = new ArrayList<>();\r\nweightedWordList.add( new WeightedWord( \"Word1\", 10, 50 ) );\r\nweightedWordList.add( new WeightedWord( \"Word2\", 60, 20 ) );\r\nTagCloud tagCloud = new TagCloud();\r\ntagCloud.setWordsList( weightedWordList );\r\n```\r\n\r\nTo become more interactive you can add a TagClickListener to the TagCloud and will receive a WeighedWord if the user clicks on a word:\r\n\r\n```Java\r\ntagCloud.addTagClickListener( new TagClickListener() {\r\n\r\n  @Override\r\n  public void tagClicked( WeightedWordInterface weightedWord ) {\r\n    doTagClicked( weightedWord );\r\n  }\r\n} );\r\n\r\n...\r\n\r\npublic void doTagClicked( WeightedWordInterface weightedWord ) {\r\n  System.out.println( String.format( \"The word: %s was clicked\", weightedWord.getWord() ) );\r\n}\r\n```\r\n\r\n\r\nSee the included [sample program](https://github.com/richardeigenmann/TagCloud/blob/master/src/main/java/org/TagCloud/Sample/SampleTagCloud.java) for a worked example.\r\n\r\n\r\nCustomisation\r\n-------------\r\n\r\nThe library is designed so that you can customise the fonts and the colors. Here is an example of famous people and their BMI index:\r\n\r\n![Screenshot of customised TagCloud showing famous people and their BMI](http://richardeigenmann.github.io/TagCloud/images/Screenshot2.png)\r\n\r\nThe data on the people came from some casual research on the Internet. See the source code [People.java](https://github.com/richardeigenmann/TagCloud/blob/master/src/main/java/org/TagCloud/Sample/People.java)\r\n\r\nTo get the colors to change according to the BMI of the person you have to tell TagCloud to use a special [ColorProvider](http://richardeigenmann.github.io/TagCloud/javadoc/org/TagCloud/ColorProvider.html). Some sample ColorProviders are bundled in the code. See the [Javadoc](http://richardeigenmann.github.io/TagCloud/javadoc/org/TagCloud/ColorProviders/package-summary.html).\r\n\r\n```Java\r\ntagCloud.setColorProvider( new BMIColorProvider() );\r\n```\r\nIf you dig into the code you will notice that some ColorProviders extend the [ColorInterpolator](http://richardeigenmann.github.io/TagCloud/javadoc/org/TagCloud/ColorInterpolator.html) which allows the extending class to supply an array of colors between which the ColorInterplator will interpolate an approfriate hue:\r\n\r\n```Java\r\npublic class SampleGradientColors extends ColorInterpolator {\r\n    public final static Color[] SAMPLE_GRADIENT_COLORS = { new Color( 0x099716 ), new Color( 0x18c928 ),\r\n        new Color( 0x36e410 ), new Color( 0x64e410 ), new Color( 0xa1e70c ),\r\n        new Color( 0xc3d000 ), new Color( 0xe8e410 ), new Color( 0xdcaf1e ),\r\n        new Color( 0xe87514 ), new Color( 0xed723b ) };\r\n\r\n    @Override\r\n    public Color[] getColorPoints() {\r\n        return SAMPLE_GRADIENT_COLORS;\r\n    }\r\n}\r\n```\r\n\r\nSimilarly, to customise the fonts used to render the tags, supply a [FontProvider](http://richardeigenmann.github.io/TagCloud/javadoc/org/TagCloud/FontProvider.html) to the TagCloud:\r\n\r\n```Java\r\ntagCloud.setFontProvider( new SansSerifFontProvider() );\r\n```\r\n\r\nSome FontProviders are supplied with the library. See the [Javadoc](http://richardeigenmann.github.io/TagCloud/javadoc/org/TagCloud/FontProviders/package-summary.html)\r\n\r\n\r\nFeedback\r\n--------\r\n\r\nPlease feel free to contact the Author with comments, suggestions, improvements, pull requests or encouragement:\r\nRichard Eigenmann\r\n<mailto:richard.eigenmann@gmail.com>\r\n\r\n\r\n<script>\r\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-47341387-2', 'richardeigenmann.github.io');\r\n  ga('send', 'pageview');\r\n\r\n</script>\r\n","google":"UA-47341387-2","note":"Don't delete this file! It's used internally to help with page regeneration."}